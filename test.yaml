apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: certificate-expiration-placement
  namespace: acm-policies
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions: []
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-scan-nist-800-53
  namespace: acm-policies
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
    - key: vendor
      operator: In
      values:
      - OpenShift
---
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: placement-policy-gitops
  namespace: acm-policies
spec:
  clusterSets:
  - global
  predicates:
  - requiredClusterSelector:
      labelSelector:
        matchExpressions:
        - key: gitops
          operator: Exists
---
apiVersion: cluster.open-cluster-management.io/v1beta2
kind: ManagedClusterSetBinding
metadata:
  name: global
  namespace: acm-policies
spec:
  clusterSet: global
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gitops
  namespace: acm-policies
placementRef:
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
  name: placement-policy-gitops
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: PolicySet
  name: gitops
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-scan-nist-800-53
  namespace: acm-policies
placementRef:
  apiGroup: apps.open-cluster-management.io
  kind: PlacementRule
  name: placement-scan-nist-800-53
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: scan-nist-800-53
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: certificate-expiration-placement
  namespace: acm-policies
placementRef:
  apiGroup: apps.open-cluster-management.io
  kind: PlacementRule
  name: certificate-expiration-placement
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: certificate-expiration
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-8 Transmission Confidentiality
      and Integrity
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: certificate-expiration
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: CertificatePolicy
      metadata:
        name: policy-certificate
      spec:
        minimumDuration: 300h
        namespaceSelector:
          exclude:
          - kube-*
          include:
          - default
        remediationAction: inform
        severity: low
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: policy-eso-secret-store
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-eso-secret-store
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              dopplerToken: '{{hub (fromSecret "acm-policies" (printf "eso-token-cluster-%s"
                .ManagedClusterName) "dopplerToken") hub}}'
            kind: Secret
            metadata:
              name: eso-token-cluster
              namespace: external-secrets
        - complianceType: musthave
          objectDefinition:
            apiVersion: external-secrets.io/v1beta1
            kind: ClusterSecretStore
            metadata:
              name: doppler-cluster
            spec:
              provider:
                doppler:
                  auth:
                    secretRef:
                      dopplerToken:
                        key: dopplerToken
                        name: eso-token-cluster
                        namespace: external-secrets
        remediationAction: enforce
        severity: low
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: policy-gitops-bootstrap
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-gitops-bootstrap
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: argoproj.io/v1alpha1
            kind: AppProject
            metadata:
              name: bootstrap
              namespace: openshift-gitops
            spec:
              clusterResourceWhitelist:
              - group: '*'
                kind: '*'
              description: Project for bootstrap cluster app
              destinations:
              - namespace: '*'
                server: https://kubernetes.default.svc
              sourceRepos:
              - https://github.com/AplphaGO/cluster-config
              - https://github.com/AplphaGO/cluster-config-pins
        - complianceType: musthave
          objectDefinition:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              labels:
                gitops.ownedBy: cluster-config
              name: cluster-config-bootstrap
              namespace: openshift-gitops
            spec:
              destination:
                namespace: openshift-gitops
                server: https://kubernetes.default.svc
              ignoreDifferences:
              - group: argoproj.io
                jsonPointers:
                - /spec/syncPolicy/automated
                kind: Application
                managedFieldsManagers:
                - argocd-server
              project: bootstrap
              source:
                path: bootstrap/overlays/{{ fromClusterClaim "gitops" }}
                repoURL: https://github.com/AplphaGO/cluster-config-pins.git
                targetRevision: HEAD
              syncPolicy:
                automated:
                  prune: false
                  selfHeal: false
        remediationAction: enforce
        severity: low
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: policy-gitops-instance
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        annotations:
          apps.open-cluster-management.io/reconcile-option: replace
        name: policy-gitops-instance
      spec:
        object-templates:
        - complianceType: mustonlyhave
          objectDefinition:
            apiVersion: v1
            data:
              plugin.yaml: |
                apiVersion: argoproj.io/v1alpha1
                kind: ConfigManagementPlugin
                metadata:
                  name: setenv-cmp-plugin
                spec:
                  version: v1.0
                  init:
                    command: [sh, -c, 'echo "Initializing setenv-plugin-cmp..."']
                  generate:
                    command:
                      - sh
                      - "-c"
                      - "set -o pipefail && kustomize build --enable-helm --enable-alpha-plugins . | envsub"
                  discover:
                    find:
                      command: [sh, -c, 'find . -maxdepth 1 -name kustomization.yaml']
            kind: ConfigMap
            metadata:
              name: setenv-cmp-plugin
              namespace: openshift-gitops
        - complianceType: mustonlyhave
          objectDefinition:
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              name: argocd-secret
              namespace: openshift-gitops
            spec:
              data:
              - remoteRef:
                  conversionStrategy: Default
                  decodingStrategy: None
                  key: OIDC_ARGOCD
                secretKey: oidc.keycloak.clientSecret
              refreshInterval: 1h
              secretStoreRef:
                kind: ClusterSecretStore
                name: doppler-cluster
              target:
                creationPolicy: Merge
                deletionPolicy: Retain
                name: argocd-secret
        - complianceType: mustonlyhave
          objectDefinition:
            apiVersion: argoproj.io/v1beta1
            kind: ArgoCD
            metadata:
              name: openshift-gitops
              namespace: openshift-gitops
            spec:
              applicationSet: {}
              controller:
                resources:
                  limits:
                    memory: 4Gi
                  requests:
                    cpu: 1000m
                    memory: 3Gi
              extraConfig:
                accounts.admin: apiKey, login
                exec.enabled: "true"
                resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |
                  jsonPointers:
                  - /status/refreshTime
                resource.customizations.ignoreResourceUpdates.noobaa.io_BackingStore: |
                  jsonPointers:
                  - /status
                  - /metadata/resourceVersion
                resource.customizations.ignoreResourceUpdates.noobaa.io_Noobaa: |
                  jsonPointers:
                  - /status
                  - /metadata/resourceVersion
                resource.customizations.ignoreResourceUpdates.ocs.openshift.io_StorageCluster: |
                  jsonPointers:
                  - /status
                  - /metadata/resourceVersion
                resource.customizations.ignoreResourceUpdates.ocs.openshift.io_StorageSystem: |
                  jsonPointers:
                  - /status
                  - /metadata/resourceVersion
                resource.ignoreResourceUpdatesEnabled: "true"
                resource.respectRBAC: normal
                ui.cssurl: https://AplphaGO.github.io/cluster-config/themes/{{
                  fromClusterClaim "gitops" }}/custom-cluster.css
              ha:
                enabled: false
              kustomizeBuildOptions: --enable-helm --enable-alpha-plugins
              monitoring:
                enabled: true
              notifications:
                enabled: true
              oidcConfig: |
                name: Keycloak
                issuer: https://sso.ocplab.com/realms/ocplab
                clientID: argocd
                clientSecret: $oidc.keycloak.clientSecret
                requestedScopes: ["openid", "profile", "email", "groups"]
              rbac:
                defaultPolicy: role:none
                policy: |
                  p, role:none, *, *, */*, deny
                  g, system:cluster-admins, role:admin
                  g, cluster-admins, role:admin
                scopes: '[groups]'
              redis:
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 250m
                    memory: 256Mi
              repo:
                resources:
                  limits:
                    cpu: "1"
                    memory: 1.5Gi
                  requests:
                    cpu: 250m
                    memory: 768Mi
                sidecarContainers:
                - command:
                  - /var/run/argocd/argocd-cmp-server
                  env:
                  - name: KUSTOMIZE_PLUGIN_HOME
                    value: /etc/kustomize/plugin
                  - name: INFRASTRUCTURE_ID
                    value: '{{ (lookup "config.openshift.io/v1" "Infrastructure" ""
                      "cluster").status.infrastructureName }}'
                  - name: CLUSTER_ID
                    value: '{{ (lookup "config.openshift.io/v1" "ClusterVersion" ""
                      "version").spec.clusterID }}'
                  - name: CLUSTER_GITOPS_NAME
                    value: '{{ fromClusterClaim "gitops" }}'
                  - name: CLUSTER_NAME
                    value: '{{ fromClusterClaim "name" }}'
                  - name: SUB_DOMAIN
                    value: '{{ (lookup "config.openshift.io/v1" "Ingress" "openshift-ingress"
                      "cluster").spec.domain }}'
                  image: quay.io/gnunn/tools:latest
                  imagePullPolicy: Always
                  name: setenv-plugin
                  securityContext:
                    runAsNonRoot: true
                  volumeMounts:
                  - mountPath: /var/run/argocd
                    name: var-files
                  - mountPath: /home/argocd/cmp-server/plugins
                    name: plugins
                  - mountPath: /tmp
                    name: tmp
                  - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                    name: setenv-cmp-plugin
                    subPath: plugin.yaml
                volumes:
                - configMap:
                    name: setenv-cmp-plugin
                  name: setenv-cmp-plugin
              resourceActions:
              - action: |
                  discovery.lua: |
                    local actions = {}
                    local enabled = false
                    if obj.status ~= nil and  obj.status.phase == "DONE" then
                      enabled = true
                    end
                    actions["rescan"] = {["disabled"] = not(enabled)}
                    return actions
                  definitions:
                  - name: rescan
                    action.lua: |
                      if obj.metadata.annotations == nil then
                          obj.metadata.annotations = {}
                      end
                      obj.metadata.annotations["compliance.openshift.io/rescan"] = ""
                      return obj
                group: compliance.openshift.io
                kind: ComplianceScan
              resourceExclusions: |
                - apiGroups:
                  - tekton.dev
                  clusters:
                  - '*'
                  kinds:
                  - TaskRun
                  - PipelineRun
                - apiGroups:
                  - compliance.openshift.io
                  kinds:
                  - ComplianceCheckResult
                  - ComplianceRemediation
                - apiGroups:
                  - policy.open-cluster-management.io
                  kinds:
                  - ConfigurationPolicy
                - apiGroups:
                  - noobaa.io
                  kinds:
                  - NooBaa
                  - BucketClass
              resourceHealthChecks:
              - check: |
                  hs = {}
                  hs.status = "Progressing"
                  hs.message = ""
                  if obj.status ~= nil then
                    if obj.status.health ~= nil then
                      hs.status = obj.status.health.status
                      hs.message = obj.status.health.message
                    end
                  end
                  return hs
                group: argoproj.io
                kind: Application
              - check: |
                  health_status = {}
                  if obj.status ~= nil then
                    if obj.status.conditions ~= nil then
                      numDegraded = 0
                      numPending = 0
                      msg = ""
                      for i, condition in pairs(obj.status.conditions) do
                        msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
                        if condition.type == "InstallPlanPending" and condition.status == "True" then
                          numPending = numPending + 1
                        elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                          numDegraded = numDegraded + 1
                        elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                          numDegraded = numDegraded + 1
                        elseif (condition.type == "CatalogSourcesUnhealthy" and condition.status == "False") then
                          break
                        end
                      end
                      if numDegraded == 0 and numPending == 0 then
                        health_status.status = "Healthy"
                        health_status.message = msg
                        return health_status
                      elseif numPending > 0 and numDegraded == 0 then
                        health_status.status = "Progressing"
                        health_status.message = "An install plan for a subscription is pending installation"
                        return health_status
                      else
                        health_status.status = "Degraded"
                        health_status.message = msg
                        return health_status
                      end
                    end
                  end
                  health_status.status = "Progressing"
                  health_status.message = "An install plan for a subscription is pending installation"
                  return health_status
                group: operators.coreos.com
                kind: Subscription
              - check: |
                  hs = {}
                  if obj.status ~= nil then
                    if obj.status.phase ~= nil then
                      if obj.status.phase == "Complete" then
                        hs.status = "Healthy"
                        hs.message = obj.status.phase
                        return hs
                      end
                    end
                  end
                  hs.status = "Progressing"
                  hs.message = "Waiting for InstallPlan to complete"
                  return hs
                group: operators.coreos.com
                kind: InstallPlan
              - check: |
                  hs = {}
                  if obj.status ~= nil and obj.status.conditions ~= nil then
                      for i, condition in ipairs(obj.status.conditions) do
                        if condition.status == "True" or condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful" then
                            hs.status = "Healthy"
                            hs.message = "Install Successful"
                            return hs
                        end
                      end
                  end
                  hs.status = "Progressing"
                  hs.message = "Waiting for Central to deploy."
                  return hs
                group: platform.stackrox.io
                kind: Central
              - check: |
                  hs = {}
                  hs.status = "Progressing"
                  hs.message = ""
                  if obj.status ~= nil then
                    if obj.status.tags ~= nil then
                      numTags = 0
                      for _ , item in pairs(obj.status.tags) do
                        numTags = numTags + 1
                        numItems = 0
                        if item.tags ~= nil then
                          for _ , item in pairs(item.tags) do
                            numItems = numItems + 1
                          end
                          if numItems == 0 then
                            return hs
                          end
                        end
                      end
                      if numTags > 0 then
                        hs.status = "Healthy"
                        hs.message = "ImageStream has tags resolved"
                        return hs
                      end
                    end
                  end
                  return hs
                group: image.openshift.io
                kind: ImageStream
              - check: |
                  hs = {}
                  if obj.status ~= nil then
                    if obj.status.phase ~= nil then
                      if obj.status.phase == "Complete" then
                        hs.status = "Healthy"
                        hs.message = obj.status.phase
                        return hs
                      end
                    end
                  end
                  hs.status = "Progressing"
                  hs.message = "Waiting for Build to complete"
                  return hs
                group: build.openshift.io
                kind: Build
              - check: |
                  hs = {}
                  if obj.status ~= nil then
                    if obj.status.phase ~= nil then
                      if obj.status.phase == "Pending" then
                        hs.status = "Healthy"
                        hs.message = obj.status.phase
                        return hs
                      end
                      if obj.status.phase == "Bound" then
                        hs.status = "Healthy"
                        hs.message = obj.status.phase
                        return hs
                      end
                    end
                  end
                  hs.status = "Progressing"
                  hs.message = "Waiting for PVC"
                  return hs
                kind: PersistentVolumeClaim
              resourceIgnoreDifferences:
                resourceIdentifiers:
                - customization:
                    jsonPointers:
                    - /status/ingress
                    - /metadata/annotations
                  group: route.openshift.io
                  kind: Route
                - customization:
                    jsonPointers:
                    - /status/ingress
                  group: quay.redhat.com
                  kind: QuayRegistry
                - customization:
                    jsonPointers:
                    - /spec/managedClusterClientConfigs
                  group: cluster.open-cluster-management.io
                  kind: ManagedCluster
              resourceTrackingMethod: annotation
              server:
                insecure: true
                route:
                  enabled: true
                  tls:
                    insecureEdgeTerminationPolicy: Redirect
                    termination: edge
        remediationAction: enforce
        severity: low
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: policy-gitops-notifications
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        annotations:
          policy.open-cluster-management.io/disable-templates: "true"
        name: policy-gitops-notifications
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: argoproj.io/v1alpha1
            kind: NotificationsConfiguration
            metadata:
              name: default-notifications-configuration
              namespace: openshift-gitops
            spec:
              services:
                service.slack: |
                  token: $slack-token
              templates:
                template.app-created: |-
                  email:
                    subject: Application {{.app.metadata.name}} has been created.
                  message: Application {{.app.metadata.name}} has been created.
                  teams:
                    title: Application {{.app.metadata.name}} has been created.
                template.app-deleted: |-
                  email:
                    subject: Application {{.app.metadata.name}} has been deleted.
                  message: Application {{.app.metadata.name}} has been deleted.
                  teams:
                    title: Application {{.app.metadata.name}} has been deleted.
                template.app-deployed: |-
                  email:
                    subject: New version of an application {{.app.metadata.name}} is up and running.
                  message: |
                    {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#18be52",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        },
                        {
                          "title": "Revision",
                          "value": "{{.app.status.sync.revision}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      },
                      {
                        "name": "Revision",
                        "value": "{{.app.status.sync.revision}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |-
                      [{
                        "@type":"OpenUri",
                        "name":"Operation Application",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    themeColor: '#000080'
                    title: New version of an application {{.app.metadata.name}} is up and running.
                template.app-health-degraded: |-
                  email:
                    subject: Application {{.app.metadata.name}} has degraded.
                  message: |
                    {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
                    Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#f4c030",
                        "fields": [
                        {
                          "title": "Health Status",
                          "value": "{{.app.status.health.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Health Status",
                        "value": "{{.app.status.health.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |
                      [{
                        "@type":"OpenUri",
                        "name":"Open Application",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    themeColor: '#FF0000'
                    title: Application {{.app.metadata.name}} has degraded.
                template.app-sync-failed: |-
                  email:
                    subject: Failed to sync application {{.app.metadata.name}}.
                  message: |
                    {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
                    Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#E96D76",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Failed at",
                        "value": "{{.app.status.operationState.finishedAt}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |-
                      [{
                        "@type":"OpenUri",
                        "name":"Open Operation",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    themeColor: '#FF0000'
                    title: Failed to sync application {{.app.metadata.name}}.
                template.app-sync-running: |-
                  email:
                    subject: Start syncing application {{.app.metadata.name}}.
                  message: |
                    The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
                    Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#0DADEA",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Started at",
                        "value": "{{.app.status.operationState.startedAt}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |-
                      [{
                        "@type":"OpenUri",
                        "name":"Open Operation",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    title: Start syncing application {{.app.metadata.name}}.
                template.app-sync-status-unknown: |-
                  email:
                    subject: Application {{.app.metadata.name}} sync status is 'Unknown'
                  message: |
                    {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
                    Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
                    {{if ne .serviceType "slack"}}
                    {{range $c := .app.status.conditions}}
                        * {{$c.message}}
                    {{end}}
                    {{end}}
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#E96D76",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |-
                      [{
                        "@type":"OpenUri",
                        "name":"Open Application",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    title: Application {{.app.metadata.name}} sync status is 'Unknown'
                template.app-sync-succeeded: |-
                  email:
                    subject: Application {{.app.metadata.name}} has been successfully synced.
                  message: |
                    {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
                    Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
                  slack:
                    attachments: |
                      [{
                        "title": "{{ .app.metadata.name}}",
                        "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                        "color": "#18be52",
                        "fields": [
                        {
                          "title": "Sync Status",
                          "value": "{{.app.status.sync.status}}",
                          "short": true
                        },
                        {
                          "title": "Repository",
                          "value": "{{.app.spec.source.repoURL}}",
                          "short": true
                        }
                        {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "title": "{{$c.type}}",
                          "value": "{{$c.message}}",
                          "short": true
                        }
                        {{end}}
                        ]
                      }]
                    deliveryPolicy: Post
                    groupingKey: ""
                    notifyBroadcast: false
                  teams:
                    facts: |
                      [{
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Synced at",
                        "value": "{{.app.status.operationState.finishedAt}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                        {{if not $index}},{{end}}
                        {{if $index}},{{end}}
                        {
                          "name": "{{$c.type}}",
                          "value": "{{$c.message}}"
                        }
                      {{end}}
                      ]
                    potentialAction: |-
                      [{
                        "@type":"OpenUri",
                        "name":"Operation Details",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                        }]
                      },
                      {
                        "@type":"OpenUri",
                        "name":"Open Repository",
                        "targets":[{
                          "os":"default",
                          "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                        }]
                      }]
                    themeColor: '#000080'
                    title: Application {{.app.metadata.name}} has been successfully synced
              triggers:
                trigger.on-created: |-
                  - description: Application is created.
                    oncePer: app.metadata.name
                    send:
                    - app-created
                    when: "true"
                trigger.on-deleted: |-
                  - description: Application is deleted.
                    oncePer: app.metadata.name
                    send:
                    - app-deleted
                    when: app.metadata.deletionTimestamp != nil
                trigger.on-deployed: |-
                  - description: Application is synced and healthy. Triggered once per commit.
                    oncePer: app.status.operationState.syncResult.revision
                    send:
                    - app-deployed
                    when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status
                        == 'Healthy'
                trigger.on-health-degraded: |-
                  - description: Application has degraded
                    send:
                    - app-health-degraded
                    when: app.status.health.status == 'Degraded'
                trigger.on-sync-failed: |-
                  - description: Application syncing has failed
                    send:
                    - app-sync-failed
                    when: app.status.operationState.phase in ['Error', 'Failed']
                trigger.on-sync-running: |-
                  - description: Application is being synced
                    send:
                    - app-sync-running
                    when: app.status.operationState.phase in ['Running']
                trigger.on-sync-status-unknown: |-
                  - description: Application status is 'Unknown'
                    send:
                    - app-sync-status-unknown
                    when: app.status.sync.status == 'Unknown'
                trigger.on-sync-succeeded: |-
                  - description: Application syncing has succeeded
                    send:
                    - app-sync-succeeded
                    when: app.status.operationState.phase in ['Succeeded']
        - complianceType: musthave
          objectDefinition:
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              name: argocd-notifications-secret
              namespace: openshift-gitops
            spec:
              data:
              - remoteRef:
                  key: GITOPS_SLACK_TOKEN
                secretKey: slack-token
              secretStoreRef:
                kind: ClusterSecretStore
                name: doppler-cluster
              target:
                creationPolicy: Merge
                deletionPolicy: Retain
                name: argocd-notifications-secret
        remediationAction: enforce
        severity: low
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  name: policy-gitops-subscription
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-gitops-subscription
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: openshift-gitops-operator
        - complianceType: musthave
          objectDefinition:
            apiVersion: operators.coreos.com/v1
            kind: OperatorGroup
            metadata:
              name: gitops-operators
              namespace: openshift-gitops-operator
            spec:
              upgradeStrategy: Default
        - complianceType: musthave
          objectDefinition:
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: openshift-gitops-operator
              namespace: openshift-gitops-operator
            spec:
              channel: gitops-1.12
              config:
                env:
                - name: ARGOCD_CLUSTER_CONFIG_NAMESPACES
                  value: openshift-gitops, gitops
                - name: CONTROLLER_CLUSTER_ROLE
                  value: gitops-controller
                - name: SERVER_CLUSTER_ROLE
                  value: gitops-server
              installPlanApproval: Automatic
              name: openshift-gitops-operator
              source: redhat-operators
              sourceNamespace: openshift-marketplace
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: openshift-gitops
        - complianceType: musthave
          objectDefinition:
            aggregationRule:
              clusterRoleSelectors:
              - matchLabels:
                  gitops/aggregate-to-controller: "true"
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              annotations:
                rbac.authorization.kubernetes.io/autoupdate: "true"
              name: gitops-controller
            rules: []
        - complianceType: musthave
          objectDefinition:
            aggregationRule:
              clusterRoleSelectors:
              - matchLabels:
                  rbac.authorization.k8s.io/aggregate-to-admin: "true"
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                gitops/aggregate-to-controller: "true"
              name: gitops-controller-admin
            rules: []
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                gitops/aggregate-to-controller: "true"
              name: gitops-controller-view
            rules:
            - apiGroups:
              - '*'
              resources:
              - '*'
              verbs:
              - get
              - list
              - watch
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: gitops-server
            rules:
            - apiGroups:
              - '*'
              resources:
              - '*'
              verbs:
              - get
              - patch
              - delete
            - apiGroups:
              - ""
              resources:
              - secrets
              - configmaps
              verbs:
              - create
              - get
              - list
              - watch
              - update
              - patch
              - delete
            - apiGroups:
              - argoproj.io
              resources:
              - applications
              - appprojects
              - applicationsets
              verbs:
              - create
              - get
              - list
              - watch
              - update
              - delete
              - patch
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - list
            - apiGroups:
              - ""
              resources:
              - pods/exec
              verbs:
              - create
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: argocd-application-controller-cluster-admin
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: openshift-gitops-argocd-application-controller
              namespace: openshift-gitops
        remediationAction: enforce
        severity: low
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: PR.IP Information Protection Processes
      and Procedures
    policy.open-cluster-management.io/controls: PR.IP-1 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST-CSF
  name: scan-nist-800-53
  namespace: acm-policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: scan-nist-800-53
      spec:
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: compliance.openshift.io/v1alpha1
            kind: ComplianceCheckResult
            metadata:
              labels:
                compliance.openshift.io/check-status: FAIL
                compliance.openshift.io/suite: cis-compliance
              namespace: openshift-compliance
        remediationAction: inform
        severity: high
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1beta1
kind: PolicySet
metadata:
  name: gitops
  namespace: acm-policies
spec:
  description: Policy for bootstrapping cluster with gitops
  policies:
  - policy-eso-secret-store
  - policy-gitops-bootstrap
  - policy-gitops-instance
  - policy-gitops-notifications
  - policy-gitops-subscription
