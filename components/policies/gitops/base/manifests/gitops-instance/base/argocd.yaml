apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceTrackingMethod: annotation
  applicationSet: {}
  extraConfig:
    oidc.config: |
      name: Keycloak
      issuer: https://keycloak-sso.apps.hub.lab.local/auth/realms/myorg
      clientID: argocd-client
      clientSecret: ocp-secret
      requestedScopes: ["openid", "profile", "email"]
      rootCA: |
        -----BEGIN CERTIFICATE-----
        MIIDXzCCAkegAwIBAgIIAnTff7yGfxswDQYJKoZIhvcNAQELBQAwJjEkMCIGA1UE
        AwwbaW5ncmVzcy1vcGVyYXRvckAxNzE0MTk4ODMwMB4XDTI0MDQyNzA2MjE0N1oX
        DTI2MDQyNzA2MjE0OFowHzEdMBsGA1UEAwwUKi5hcHBzLmh1Yi5sYWIubG9jYWww
        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDAhTuF2aQyYWjZkSUG3Lvn
        F0gkAzRJuCEskYZbWI3S1rop4PDnyTZ0PyKXiujnsVQNb1/S35QIvPOQJOdY+zDm
        uPOzl+TGN7XSAIq/PZoCr2BnqD3touXllN5tNw8nMmmG7A0VhBrsm2ewVhRHYV6Y
        jwb79/jgHrM5HlJYCbvnxfMexZAVa527kikJNlCTwE5U0kfCqD9QdeQ0iyQXXg+R
        BRSh52bACmFQHpY0ytjZcTL8f4mSsEi3LH/hJwOyK5bD11El/KZD2pS1vQ8cZnDi
        4LmMkGc1Lf/HM01lJfsCYbNzuLubCPw/rikqzKB7sKsMocfKv+0/7E57tfgcRNAz
        AgMBAAGjgZcwgZQwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMB
        MAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFG+JX58sHqMlguKhx0sXk+u9rpCdMB8G
        A1UdIwQYMBaAFCWgSVzxD8E0pXLqxcHn+SOqYRPfMB8GA1UdEQQYMBaCFCouYXBw
        cy5odWIubGFiLmxvY2FsMA0GCSqGSIb3DQEBCwUAA4IBAQB6bQky+I1aPFDU71/Q
        edWhi9MkeMW2wk3eL99zazMwL7EpWSiqygMjf3AgKMAZEMFrLxs/ee+NaqXtoYCp
        eKATKlXRJlmGW2s8U37DlBKj4rmzDCKYW6Rz+rxJ+OQjR/UNc2N4v/uMiVo+PDny
        VCqIvGY9hs8+XPVXRYPb00CMUDV/Y48mTfCaGpmx60eTBVSPJEJD/ba2QTY/1qAL
        K8wCaVrY7Fcmv5H9nIy46y90ozFFifXjbQ48UfGrEWMSo7D3TK0mDVtZK4RrfwIL
        AqikKi2Xm6oc8uBVUpWC1CrjkQ83RSwf8C6eO5FZUg53F06TaOW0yUFif3IustjN
        CySu
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        MIIDDDCCAfSgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtpbmdy
        ZXNzLW9wZXJhdG9yQDE3MTQxOTg4MzAwHhcNMjQwNDI3MDYyMDI5WhcNMjYwNDI3
        MDYyMDMwWjAmMSQwIgYDVQQDDBtpbmdyZXNzLW9wZXJhdG9yQDE3MTQxOTg4MzAw
        ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3u6YUMKsrKpPeMGaCWAjU
        fKTA476amPh8vafW7ozymn0bN2oEFN4YyhEsjm5/pCdFoBH6ueqirZxgdIOJDQNu
        DvQ2Mo3yiUDT2czRtfiBl1elPxJOUJQzCiS9o71rO0Rk/a3DIvIka+ijgHDD2pN2
        ryBpgUQv0ecq17FzpDgXAjkTR1UGo1a9bMFfRnBLJdbf01WpEXRyg92+DUQbuLCp
        rKAeGjrWHCMxVCwwikjelUAR8hk+iRhi4Ezhu3I5nTewQu43H0zOvNfuZI9kV3FV
        mA+707rAciYh/VjUOqiZvdlIhLcx7Jplhw+J+moebV0Bmizev0WpY7kdWtGTQaWV
        AgMBAAGjRTBDMA4GA1UdDwEB/wQEAwICpDASBgNVHRMBAf8ECDAGAQH/AgEAMB0G
        A1UdDgQWBBQloElc8Q/BNKVy6sXB5/kjqmET3zANBgkqhkiG9w0BAQsFAAOCAQEA
        XENu/DKsek8ZiFVR99s8uo5EExJzRwqAf6Qm8cl/884Ups0Enyu5LvO88zUyzxbd
        BSgebCa3Q9hSNiWngCXrTA8IlwgFR1+tWfD9+pPLMr0b0gSCfnJDHHyYIY0Dc33F
        68caQRhJSTLYUz2l1ZXw8ydsTd+RNVLhvRu21ocvxzgkQDQHF2IvN61uDzeB8jFD
        EYIqdSVa+Jif43v1HqQmeH3FahN3RpqZ0qi1FF60ylEyugiiHfXGUMz9aWd7m38R
        bzMigSqpNr8Iye00ltWRHlnOY6u8QMu4rZKnsluSi4jy/MxYnQTC9QtrkcO5rUW6
        bnUS+lD0yEHO875j4LUnng==
        -----END CERTIFICATE----- 
    exec.enabled: "true"
    resource.respectRBAC: "normal"
    resource.ignoreResourceUpdatesEnabled: 'true'
    #resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |
    #  jsonPointers:
    #  - /status/refreshTime
    resource.customizations.ignoreResourceUpdates.ocs.openshift.io_StorageCluster: |
      jsonPointers:
      - /status
      - /metadata/resourceVersion
    resource.customizations.ignoreResourceUpdates.ocs.openshift.io_StorageSystem: |
      jsonPointers:
      - /status
      - /metadata/resourceVersion
    resource.customizations.ignoreResourceUpdates.noobaa.io_Noobaa: |
      jsonPointers:
      - /status
      - /metadata/resourceVersion
    resource.customizations.ignoreResourceUpdates.noobaa.io_BackingStore: |
      jsonPointers:
      - /status
      - /metadata/resourceVersion
    accounts.admin: apiKey, login
    ui.cssurl: 'https://AplphaGO.github.io/cluster-config/themes/{{ fromClusterClaim "gitops" }}/custom-cluster.css'
  kustomizeBuildOptions: "--enable-helm --enable-alpha-plugins"
  #oidcConfig: |
  #  name: Keycloak
  #  issuer: https://sso.ocplab.com/realms/ocplab
  #  clientID: argocd
  #  clientSecret: $oidc.keycloak.clientSecret
  #  requestedScopes: ["openid", "profile", "email", "groups"]
  controller:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 3Gi
  monitoring:
    enabled: true
  repo:
    sidecarContainers:
      - name: setenv-plugin
        command: [/var/run/argocd/argocd-cmp-server]
        env:
          - name: KUSTOMIZE_PLUGIN_HOME
            value: /etc/kustomize/plugin
          - name: INFRASTRUCTURE_ID
            value: '{{ (lookup "config.openshift.io/v1" "Infrastructure" "" "cluster").status.infrastructureName }}'
          - name: CLUSTER_ID
            value: '{{ (lookup "config.openshift.io/v1" "ClusterVersion" "" "version").spec.clusterID }}'
          - name: CLUSTER_GITOPS_NAME
            value: '{{ fromClusterClaim "gitops" }}'
          - name: CLUSTER_NAME
            value: '{{ fromClusterClaim "name" }}'
          - name: SUB_DOMAIN
            value: '{{ (lookup "config.openshift.io/v1" "Ingress" "openshift-ingress" "cluster").spec.domain }}'
        image: quay.io/gnunn/tools:latest
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: setenv-cmp-plugin
    volumes:
      - configMap:
          name: setenv-cmp-plugin
        name: setenv-cmp-plugin
    resources:
      limits:
        cpu: '1'
        memory: 1.5Gi
      requests:
        cpu: 250m
        memory: 768Mi
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  server:
    insecure: true
    # host: 'openshift-gitops-server-openshift-gitops.{{ (lookup "config.openshift.io/v1" "Ingress" "openshift-ingress" "cluster").spec.domain }}'
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  notifications:
    enabled: true
  resourceActions:
    - group: compliance.openshift.io
      kind: ComplianceScan
      action: |
        discovery.lua: |
          local actions = {}
          local enabled = false
          if obj.status ~= nil and  obj.status.phase == "DONE" then
            enabled = true
          end
          actions["rescan"] = {["disabled"] = not(enabled)}
          return actions
        definitions:
        - name: rescan
          action.lua: |
            if obj.metadata.annotations == nil then
                obj.metadata.annotations = {}
            end
            obj.metadata.annotations["compliance.openshift.io/rescan"] = ""
            return obj
  resourceHealthChecks:
    - group: argoproj.io
      kind: Application
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            hs.message = obj.status.health.message
          end
        end
        return hs
    - group: operators.coreos.com
      kind: Subscription
      check: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            numDegraded = 0
            numPending = 0
            msg = ""
            for i, condition in pairs(obj.status.conditions) do
              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
              if condition.type == "InstallPlanPending" and condition.status == "True" then
                numPending = numPending + 1
              elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                numDegraded = numDegraded + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                numDegraded = numDegraded + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" and condition.status == "False") then
                break
              end
            end
            if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
            elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = "An install plan for a subscription is pending installation"
              return health_status
            else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "An install plan for a subscription is pending installation"
        return health_status
    - group: operators.coreos.com
      kind: InstallPlan
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for InstallPlan to complete"
        return hs
    - group: platform.stackrox.io
      kind: Central
      check: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.status == "True" or condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful" then
                  hs.status = "Healthy"
                  hs.message = "Install Successful"
                  return hs
              end
            end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    - group: image.openshift.io
      kind: ImageStream
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    - group: build.openshift.io
      kind: Build
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs
    - kind: PersistentVolumeClaim
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for PVC"
        return hs
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - group: route.openshift.io
        kind: Route
        customization:
          jsonPointers:
            - /status/ingress
            - /metadata/annotations
      - group: quay.redhat.com
        kind: QuayRegistry
        customization:
          jsonPointers:
            - /status/ingress
      - group: cluster.open-cluster-management.io
        kind: ManagedCluster
        customization:
          jsonPointers:
            - /spec/managedClusterClientConfigs
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - compliance.openshift.io
      kinds:
      - ComplianceCheckResult
      - ComplianceRemediation
    - apiGroups:
      - policy.open-cluster-management.io
      kinds:
      - ConfigurationPolicy
    - apiGroups:
      - noobaa.io
      kinds:
      - NooBaa
      - BucketClass
  ha:
    enabled: false
  #tls:
  #  ca:
  #    configMapName: router-certs-default
  rbac:
    defaultPolicy: 'role:none'
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: "[groups]"
