apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceTrackingMethod: annotation
  applicationSet: {}
  disableAdmin: false
  extraConfig:
    accounts.admin: apiKey, login
    ui.cssurl: 'https://gnunn-gitops.github.io/cluster-config/themes/{{ fromClusterClaim "gitops" }}/custom-cluster.css'
  configManagementPlugins: |-
    - name: kustomize-envvar
      generate:
        command: ["sh", "-c"]
        args: ["kustomize build --enable-helm . | perl -pe 's{\\$(\\{)?(\\w+)(?(1)\\})}{$ENV{$2} // $&}ge'"]
  kustomizeBuildOptions: "--enable-helm --enable-alpha-plugins"
  controller:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 3Gi
  monitoring:
    enabled: true
  repo:
    initContainers:
    - args:
      - -c
      - cp /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator/PolicyGenerator
        /policy-generator/PolicyGenerator
      command:
      - /bin/bash
      #image: registry.redhat.io/rhacm2/multicluster-operators-subscription-rhel8:v2.7
      image: quay.io/open-cluster-management/multicloud-operators-subscription:latest
      name: policy-generator-install
      volumeMounts:
      - mountPath: /policy-generator
        name: policy-generator
    volumeMounts:
    - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
      name: policy-generator
    volumes:
    - emptyDir: {}
      name: policy-generator
    env:
      - name: KUSTOMIZE_PLUGIN_HOME
        value: /etc/kustomize/plugin
      - name: INFRASTRUCTURE_ID
        value: '{{ (lookup "config.openshift.io/v1" "Infrastructure" "" "cluster").status.infrastructureName }}'
      - name: CLUSTER_ID
        value: '{{ (lookup "config.openshift.io/v1" "ClusterVersion" "" "version").spec.clusterID }}'
      - name: CLUSTER_GITOPS_NAME
        value: '{{ fromClusterClaim "gitops" }}'
      - name: CLUSTER_NAME
        value: '{{ fromClusterClaim "name" }}'
      - name: SUB_DOMAIN
        value: '{{ (lookup "config.openshift.io/v1" "Ingress" "openshift-ingress" "cluster").spec.domain }}'
    resources:
      limits:
        cpu: '1'
        memory: 1.5Gi
      requests:
        cpu: 250m
        memory: 768Mi
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  server:
    insecure: true
    route:
      enabled: true
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  sso:
    dex:
      image: quay.io/gnunn/dex
      version: token-exchange-1.8
      openShiftOAuth: true
    provider: dex
  notifications:
    enabled: true
  resourceCustomizations: |
    argoproj.io/Application:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            hs.message = obj.status.health.message
          end
        end
        return hs
    operators.coreos.com/Subscription:
      health.lua: |
        health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            numDegraded = 0
            numPending = 0
            msg = ""
            for i, condition in pairs(obj.status.conditions) do
              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
              if condition.type == "InstallPlanPending" and condition.status == "True" then
                numPending = numPending + 1
              elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                numDegraded = numDegraded + 1
              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                numDegraded = numDegraded + 1
              end
            end
            if numDegraded == 0 and numPending == 0 then
              health_status.status = "Healthy"
              health_status.message = msg
              return health_status
            elseif numPending > 0 and numDegraded == 0 then
              health_status.status = "Progressing"
              health_status.message = "An install plan for a subscription is pending installation"
              return health_status
            else
              health_status.status = "Degraded"
              health_status.message = msg
              return health_status
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "An install plan for a subscription is pending installation"
        return health_status
    platform.stackrox.io/Central:
      health.lua: |
        hs = {}
        if obj.status ~= nil and obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.status == "True" or condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful" then
                  hs.status = "Healthy"
                  hs.message = "Install Successful"
                  return hs
              end
            end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Central to deploy."
        return hs
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /status/ingress
    policy.open-cluster-management.io/ConfigurationPolicy:
      ignoreDifferences: |
        managedFieldsManagers:
        - config-policy-controller
    image.openshift.io/ImageStream:
      health.lua: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.tags ~= nil then
            numTags = 0
            for _ , item in pairs(obj.status.tags) do
              numTags = numTags + 1
              numItems = 0
              if item.tags ~= nil then
                for _ , item in pairs(item.tags) do
                  numItems = numItems + 1
                end
                if numItems == 0 then
                  return hs
                end
              end
            end
            if numTags > 0 then
              hs.status = "Healthy"
              hs.message = "ImageStream has tags resolved"
              return hs
            end
          end
        end
        return hs
    quay.redhat.com/QuayRegistry:
      ignoreDifferences: |
        jsonPointers:
        - /spec/components
    operators.coreos.com/InstallPlan:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for InstallPlan to complete"
        return hs
    build.openshift.io/Build:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Build to complete"
        return hs
    PersistentVolumeClaim:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Pending" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
            if obj.status.phase == "Bound" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for PVC"
        return hs
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
    - apiGroups:
      - compliance.openshift.io
      kinds:
      - ComplianceCheckResult
      - ComplianceRemediation
    - apiGroups:
      - policy.open-cluster-management.io
      clusters:
      - '*'
      kinds:
      - ConfigurationPolicy
  ha:
    enabled: false
  rbac:
    defaultPolicy: 'role:none'
    policy: |
      p, role:none, applications, get, */*, deny
      p, role:none, certificates, get, *, deny
      p, role:none, clusters, get, *, deny
      p, role:none, repositories, get, *, deny
      p, role:none, projects, get, *, deny
      p, role:none, accounts, get, *, deny
      p, role:none, gpgkeys, get, *, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: "[groups]"
