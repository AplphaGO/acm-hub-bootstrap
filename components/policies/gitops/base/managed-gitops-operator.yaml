# Adapted from Andrew Block's example: https://github.com/sabre1041/rhacm-argocd/blob/main/rhacm-managed-argocd/argocd-cluster/policies/managed-argocd.yaml
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-managed-gitops-operator
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-managed-openshift-gitops-namespace
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: openshift-gitops
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-managed-openshift-gitops-subscription
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: operators.coreos.com/v1alpha1
                kind: Subscription
                metadata:
                  name: openshift-gitops-operator
                  namespace: openshift-operators
                spec:
                  channel: latest
                  installPlanApproval: Automatic
                  name: openshift-gitops-operator
                  source: redhat-operators
                  sourceNamespace: openshift-marketplace
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-managed-openshift-gitops-clusterrolebinding
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: argocd-application-controller-cluster-admin
                subjects:
                  - kind: ServiceAccount
                    name: openshift-gitops-argocd-application-controller
                    namespace: openshift-gitops
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: cluster-admin
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-managed-openshift-gitops-bootstrap-app
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  name: cluster-config-bootstrap
                  namespace: openshift-gitops
                  labels:
                    gitops.ownedBy: cluster-config
                spec:
                  destination:
                    namespace: openshift-gitops
                    server: https://kubernetes.default.svc
                  project: default
                  source:
                    # path: clusters/{{ fromSecret "open-cluster-management-agent" "hub-kubeconfig-secret" "cluster-name" | base64dec }}/argocd/bootstrap
                    path: clusters/{{ fromClusterClaim "gitops" }}/argocd/bootstrap
                    repoURL: https://github.com/gnunn-gitops/cluster-config.git
                    targetRevision: main
                  syncPolicy:
                    automated:
                      prune: false
                      selfHeal: true
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-managed-openshift-gitops-instance
        spec:
          remediationAction: enforce
          severity: low
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - default
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1alpha1
                kind: ArgoCD
                metadata:
                  name: openshift-gitops
                  namespace: openshift-gitops
                spec:
                  applicationInstanceLabelKey: argocd.argoproj.io/instance
                  applicationSet: {}
                  kustomizeBuildOptions: "--enable-helm"
                  controller:
                    resources:
                      limits:
                        cpu: '2'
                        memory: 3Gi
                      requests:
                        cpu: 250m
                        memory: 2Gi
                  repo:
                    resources:
                      limits:
                        cpu: '1'
                        memory: 1.5Gi
                      requests:
                        cpu: 250m
                        memory: 768Mi
                  redis:
                    resources:
                      limits:
                        cpu: 500m
                        memory: 512Mi
                      requests:
                        cpu: 250m
                        memory: 256Mi
                  server:
                    insecure: false
                    route:
                      enabled: true
                      tls:
                        termination: reencrypt
                        insecureEdgeTerminationPolicy: Redirect
                  sso:
                    dex:
                      openShiftOAuth: true
                  notifications:
                    enabled: true                                              
                  resourceCustomizations: |
                    argoproj.io/Application:
                      health.lua: |
                        hs = {}
                        hs.status = "Progressing"
                        hs.message = ""
                        if obj.status ~= nil then
                          if obj.status.health ~= nil then
                            hs.status = obj.status.health.status
                            hs.message = obj.status.health.message
                          end
                        end
                        return hs
                    operators.coreos.com/Subscription:
                      health.lua: |
                        health_status = {}
                        if obj.status ~= nil then
                          if obj.status.conditions ~= nil then
                            numDegraded = 0
                            numPending = 0
                            msg = ""
                            for i, condition in pairs(obj.status.conditions) do
                              msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
                              if condition.type == "InstallPlanPending" and condition.status == "True" then
                                numPending = numPending + 1
                              elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
                                numDegraded = numDegraded + 1
                              elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
                                numDegraded = numDegraded + 1
                              end
                            end
                            if numDegraded == 0 and numPending == 0 then
                              health_status.status = "Healthy"
                              health_status.message = msg
                              return health_status
                            elseif numPending > 0 and numDegraded == 0 then
                              health_status.status = "Progressing"
                              health_status.message = "An install plan for a subscription is pending installation"
                              return health_status
                            else
                              health_status.status = "Degraded"
                              health_status.message = msg
                              return health_status
                            end
                          end
                        end
                        health_status.status = "Progressing"
                        health_status.message = "An install plan for a subscription is pending installation"
                        return health_status
                    platform.stackrox.io/Central:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil and obj.status.conditions ~= nil then
                            for i, condition in ipairs(obj.status.conditions) do
                              if condition.status == "True" or condition.reason == "InstallSuccessful" or condition.reason == "UpgradeSuccessful" then
                                  hs.status = "Healthy"
                                  hs.message = "Install Successful"
                                  return hs
                              end
                            end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for Central to deploy."
                        return hs
                    route.openshift.io/Route:
                      ignoreDifferences: |
                        jsonPointers:
                        - /status/ingress
                    image.openshift.io/ImageStream:
                      health.lua: |
                        hs = {}
                        hs.status = "Progressing"
                        hs.message = ""
                        if obj.status ~= nil then
                          if obj.status.tags ~= nil then
                            numTags = 0
                            for _ , item in pairs(obj.status.tags) do
                              numTags = numTags + 1
                              numItems = 0
                              if item.tags ~= nil then
                                for _ , item in pairs(item.tags) do
                                  numItems = numItems + 1
                                end
                                if numItems == 0 then
                                  return hs
                                end
                              end
                            end
                            if numTags > 0 then
                              hs.status = "Healthy"
                              hs.message = "ImageStream has tags resolved"
                              return hs
                            end
                          end
                        end
                        return hs
                    quay.redhat.com/QuayRegistry:
                      ignoreDifferences: |
                        jsonPointers:
                        - /spec/components
                    operators.coreos.com/InstallPlan:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            if obj.status.phase == "Complete" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for InstallPlan to complete"
                        return hs
                    build.openshift.io/Build:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            if obj.status.phase == "Complete" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for Build to complete"
                        return hs
                    PersistentVolumeClaim:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            if obj.status.phase == "Pending" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                            if obj.status.phase == "Bound" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for certificate"
                        return hs
                  resourceExclusions: |
                    - apiGroups:
                      - tekton.dev
                      clusters:
                      - '*'
                      kinds:
                      - TaskRun
                      - PipelineRun
                    - apiGroups:
                      - compliance.openshift.io
                      kinds:
                      - ComplianceCheckResult
                      - ComplianceRemediation
                  ha:
                    enabled: false
                  rbac:
                    defaultPolicy: role:readonly
                    policy: |
                      g, system:cluster-admins, role:admin
                      g, argocdadmins, role:admin
                      g, argocdusers, role:readonly
                    scopes: "[groups]"